require('dotenv').config();

const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const {SessionsClient} = require('@google-cloud/dialogflow-cx');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const SERVER_URL = process.env.SERVER_URL;
const PROJECT_ID = process.env.PROJECT_ID;
const LOCATION_ID = process.env.LOCATION_ID;
const AGENT_ID = process.env.AGENT_ID;
const LANGUAGE_CODE = process.env.LANGUAGE_CODE;

const API_URL = `https://api.telegram.org/bot${TELEGRAM_TOKEN}`;
const URI = `/webhook/${TELEGRAM_TOKEN}`;
const WEBHOOK = SERVER_URL + URI;

// Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(bodyParser.json());

// Dialogflow CX –∫–ª–∏–µ–Ω—Ç
const client = new SessionsClient({
  apiEndpoint: LOCATION_ID + '-dialogflow.googleapis.com'
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
const userSessions = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü
function isPageCommand(text) {
  const pagePatterns = [
    /–ø–æ–∫–∞–∂–∏\s+—Å—Ç—Ä–∞–Ω–∏—Ü[—É–∞]\s+(\d+)/i,
    /—Å—Ç—Ä\.?\s+(\d+)/i,
    /—Å—Ç—Ä–∞–Ω–∏—Ü[—É–∞]\s+(\d+)/i,
    /page\s+(\d+)/i
  ];
  
  for (const pattern of pagePatterns) {
    const match = text.match(pattern);
    if (match) {
      return parseInt(match[1]);
    }
  }
  return null;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Dialogflow CX –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–µ–ª–µ–π
function parseHotelsFromResponse(responseText) {
  console.log('üîç Parsing response:', responseText);
  
  const hotels = [];
  
  try {
    // –ò—â–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π
    const totalMatch = responseText.match(/–ù–∞–π–¥–µ–Ω–æ\s+(\d+)\s+–æ—Ç–µ–ª[–µ–π—è]/i);
    const totalHotels = totalMatch ? parseInt(totalMatch[1]) : 0;
    
    console.log('üìä Total hotels found:', totalHotels);
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç–µ–ª–∏ –ø–æ –±–ª–æ–∫–∞–º HOTEL_PHOTO, HOTEL_INFO, HOTEL_ID
    const lines = responseText.split('\n');
    let currentHotel = {};
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      if (line.startsWith('HOTEL_PHOTO:')) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentHotel.photo && currentHotel.name) {
          hotels.push({...currentHotel});
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–µ–ª—å
        currentHotel = {
          photo: line.replace('HOTEL_PHOTO:', '').trim(),
          name: '–û—Ç–µ–ª—å',
          price: 0,
          stars: 0,
          place: '–ê–Ω—Ç–∞–ª–∏—è',
          id: `hotel_${Date.now()}_${hotels.length}`
        };
      }
      else if (line.startsWith('HOTEL_INFO:') && currentHotel.photo) {
        const info = line.replace('HOTEL_INFO:', '').trim();
        // –ü–∞—Ä—Å–∏–º: "–ù–∞–∑–≤–∞–Ω–∏–µ - —Ü–µ–Ω–∞ USD (–∑–≤–µ–∑–¥—ã‚≠ê)"
        const match = info.match(/(.+?)\s*-\s*(\d+)\s*USD\s*\((\d+)‚≠ê\)/);
        if (match) {
          currentHotel.name = match[1].trim();
          currentHotel.price = parseInt(match[2]);
          currentHotel.stars = parseInt(match[3]);
        } else {
          // Fallback –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π
          currentHotel.name = info;
        }
      }
      else if (line.startsWith('HOTEL_ID:') && currentHotel.photo) {
        currentHotel.id = line.replace('HOTEL_ID:', '').trim();
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–µ–ª—å
    if (currentHotel.photo && currentHotel.name) {
      hotels.push({...currentHotel});
    }
    
    console.log(`‚úÖ Parsed ${hotels.length} hotels successfully`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (hotels.length > 0) {
      console.log('üè® First hotel:', {
        name: hotels[0].name,
        price: hotels[0].price,
        photo: hotels[0].photo.substring(0, 50) + '...'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Parsing error:', error);
  }
  
  return hotels;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–µ–ª—è
function createHotelCard(hotel, hotelIndex, totalHotels, currentPage = 1, totalPages = null) {
  const stars = '‚≠ê'.repeat(hotel.stars || 0);
  
  const caption = `üè® *${hotel.name}*\n\n${stars} ${hotel.stars || 0} –∑–≤–µ–∑–¥\nüí∞ *${hotel.price} USD* –∑–∞ –Ω–æ—á—å\nüìç ${hotel.place || '–ê–Ω—Ç–∞–ª–∏—è'}\n\nüìã –û—Ç–µ–ª—å ${hotelIndex + 1} –∏–∑ ${totalHotels}`;
  
  const keyboard = [];
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Ç–µ–ª—è–º –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
  const navRow = [];
  if (hotelIndex > 0) {
    navRow.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data: `hotel_${hotelIndex - 1}` });
  }
  if (hotelIndex < totalHotels - 1) {
    navRow.push({ text: '–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data: `hotel_${hotelIndex + 1}` });
  }
  if (navRow.length > 0) {
    keyboard.push(navRow);
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const pageRow = [];
  if (currentPage > 1) {
    pageRow.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data: `page_${currentPage - 1}` });
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const pageInfo = totalPages ? `üìÑ –°—Ç—Ä. ${currentPage}/${totalPages}` : `üìÑ –°—Ç—Ä. ${currentPage}`;
  pageRow.push({ text: pageInfo, callback_data: 'current_page' });
  
  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" 
  pageRow.push({ text: '–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è', callback_data: `page_${currentPage + 1}` });
  keyboard.push(pageRow);
  
  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  keyboard.push([
    { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `contact_${hotel.id}` },
    { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–µ–ª–µ', callback_data: `detail_${hotel.id}` }
  ]);
  
  keyboard.push([
    { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'new_search' }
  ]);
  
  return {
    photo: hotel.photo,
    caption: caption,
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: keyboard
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤
function processHtmlTags(text) {
  let cleanText = text;
  
  // –ó–∞–º–µ–Ω—è–µ–º HTML —Ç–µ–≥–∏ –Ω–∞ Markdown –∏ –æ—á–∏—â–∞–µ–º
  cleanText = cleanText
    .replace(/<br\s*\/?>/gi, '\n')                    // <br> -> –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    .replace(/<\/p>/gi, '\n\n')                       // </p> -> –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å
    .replace(/<p[^>]*>/gi, '')                        // —É–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π <p>
    .replace(/<strong[^>]*>(.*?)<\/strong>/gi, '*$1*') // <strong> -> –∂–∏—Ä–Ω—ã–π
    .replace(/<b[^>]*>(.*?)<\/b>/gi, '*$1*')          // <b> -> –∂–∏—Ä–Ω—ã–π
    .replace(/<em[^>]*>(.*?)<\/em>/gi, '_$1_')        // <em> -> –∫—É—Ä—Å–∏–≤
    .replace(/<i[^>]*>(.*?)<\/i>/gi, '_$1_')          // <i> -> –∫—É—Ä—Å–∏–≤
    .replace(/<li[^>]*>/gi, '‚Ä¢ ')                     // <li> -> –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
    .replace(/<\/li>/gi, '\n')                        // </li> -> –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    .replace(/<ul[^>]*>/gi, '\n')                     // <ul> -> –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    .replace(/<\/ul>/gi, '\n')                        // </ul> -> –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    .replace(/<[^>]*>/g, '')                          // —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML —Ç–µ–≥–∏
    .replace(/\n{3,}/g, '\n\n')                       // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    .replace(/^\s+|\s+$/gm, '')                       // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    .trim();
  
  return cleanText;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ DialogFlow
function parseHotelDetails(responseText) {
  console.log('üîç Parsing hotel details:', responseText.substring(0, 200));
  
  let hotelDetails = {
    name: '',
    place: '',
    star: 0,
    img: '',
    description: {}
  };
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
    const nameMatch = responseText.match(/\*\*([^*]+)\*\*/);
    if (nameMatch) {
      hotelDetails.name = nameMatch[1];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—Ç–æ
    const placeMatch = responseText.match(/\*\*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\*\*\s*([^\n]+)/);
    if (placeMatch) {
      hotelDetails.place = placeMatch[1];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–≤–µ–∑–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const starMatch = responseText.match(/(\d+)\s*–∑–≤–µ–∑–¥/);
    if (starMatch) {
      hotelDetails.star = parseInt(starMatch[1]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imgMatch = responseText.match(/\[URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\s*(https?:\/\/[^\]]+)\]/);
    if (imgMatch) {
      hotelDetails.img = imgMatch[1];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è
    const descMatch = responseText.match(/\*\*–û–ø–∏—Å–∞–Ω–∏–µ:\*\*\s*([^*]+?)(?=\*\*|$)/s);
    if (descMatch) {
      hotelDetails.description.location = descMatch[1].trim();
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–¥–æ–±—Å—Ç–≤–∞
    const amenitiesMatch = responseText.match(/\*\*–£–¥–æ–±—Å—Ç–≤–∞:\*\*\s*([^*]+?)(?=\*\*|$)/s);
    if (amenitiesMatch) {
      hotelDetails.description.amenities = amenitiesMatch[1].trim();
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–∞—Ö
    const roomsMatch = responseText.match(/\*\*–ù–æ–º–µ—Ä–∞:\*\*\s*([^*]+?)(?=\*\*|$)/s);
    if (roomsMatch) {
      hotelDetails.description.rooms = roomsMatch[1].trim();
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∏–∑–Ω–µ—Å-—É–¥–æ–±—Å—Ç–≤–∞
    const businessMatch = responseText.match(/\*\*–ë–∏–∑–Ω–µ—Å-—É–¥–æ–±—Å—Ç–≤–∞:\*\*\s*([^*]+?)(?=\*\*|$)/s);
    if (businessMatch) {
      hotelDetails.description.business_amenities = businessMatch[1].trim();
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const attractionsMatch = responseText.match(/\*\*–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\*\*\s*([\s\S]*?)(?=\*\*|–ë–ª–∏–∂–∞–π—à–∏–π|$)/);
    if (attractionsMatch) {
      hotelDetails.description.attractions = attractionsMatch[1].trim();
    }
    
    console.log('‚úÖ Parsed hotel details:', {
      name: hotelDetails.name,
      place: hotelDetails.place,
      star: hotelDetails.star,
      hasImage: !!hotelDetails.img
    });
    
  } catch (error) {
    console.error('‚ùå Error parsing hotel details:', error);
  }
  
  return hotelDetails;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
function formatHotelDetailsForTelegram(hotelDetails, originalText) {
  let formattedText = '';
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
  if (hotelDetails.name) {
    formattedText += `üè® *${hotelDetails.name}*\n\n`;
  }
  
  // –ú–µ—Å—Ç–æ –∏ –∑–≤–µ–∑–¥—ã
  if (hotelDetails.place) {
    formattedText += `üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* ${hotelDetails.place}\n`;
  }
  
  if (hotelDetails.star > 0) {
    const stars = '‚≠ê'.repeat(hotelDetails.star);
    formattedText += `${stars} ${hotelDetails.star} –∑–≤–µ–∑–¥\n`;
  }
  
  formattedText += '\n';
  
  // –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
  if (hotelDetails.description.location) {
    formattedText += `üìã *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${processHtmlTags(hotelDetails.description.location)}\n\n`;
  }
  
  // –£–¥–æ–±—Å—Ç–≤–∞
  if (hotelDetails.description.amenities) {
    formattedText += `üè™ *–£–¥–æ–±—Å—Ç–≤–∞:*\n${processHtmlTags(hotelDetails.description.amenities)}\n\n`;
  }
  
  // –ù–æ–º–µ—Ä–∞
  if (hotelDetails.description.rooms) {
    formattedText += `üõè *–ù–æ–º–µ—Ä–∞:*\n${processHtmlTags(hotelDetails.description.rooms)}\n\n`;
  }
  
  // –ë–∏–∑–Ω–µ—Å-—É–¥–æ–±—Å—Ç–≤–∞
  if (hotelDetails.description.business_amenities) {
    formattedText += `üíº *–ë–∏–∑–Ω–µ—Å-—É–¥–æ–±—Å—Ç–≤–∞:*\n${processHtmlTags(hotelDetails.description.business_amenities)}\n\n`;
  }
  
  // –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (hotelDetails.description.attractions) {
    formattedText += `üó∫ *–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*\n${processHtmlTags(hotelDetails.description.attractions)}\n\n`;
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
  if (!formattedText.trim()) {
    formattedText = processHtmlTags(originalText);
  }
  
  return formattedText;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Dialogflow CX –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è
async function queryDialogflowForHotelDetails(text, sessionId) {
  try {
    const sessionPath = client.projectLocationAgentSessionPath(
      PROJECT_ID, LOCATION_ID, AGENT_ID, sessionId
    );
    
    console.log(`üì§ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è:`, { text, sessionId });
    
    const request = {
      session: sessionPath,
      queryInput: {
        text: {
          text: text
        },
        languageCode: LANGUAGE_CODE
      }
    };
    
    const [response] = await client.detectIntent(request);
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Dialogflow (–¥–µ—Ç–∞–ª–∏):', {
      intent: response.queryResult.intent?.displayName || 'undefined',
      responseCount: response.queryResult.responseMessages?.length || 0
    });
    
    return response;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Dialogflow (–¥–µ—Ç–∞–ª–∏):', error);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Dialogflow CX —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function queryDialogflowForHotels(text, sessionId, page = 1) {
  try {
    const sessionPath = client.projectLocationAgentSessionPath(
      PROJECT_ID, LOCATION_ID, AGENT_ID, sessionId
    );
    
    console.log(`üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–µ–ª–µ–π —Å—Ç—Ä. ${page}:`, { text, sessionId });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let queryText = text;
    if (page > 1) {
      queryText = `–ø–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}`;
    }
    
    const request = {
      session: sessionPath,
      queryInput: {
        text: {
          text: queryText
        },
        languageCode: LANGUAGE_CODE
      },
      queryParams: {
        parameters: {
          page: page
        }
      }
    };
    
    const [response] = await client.detectIntent(request);
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Dialogflow:', {
      intent: response.queryResult.intent?.displayName || 'undefined',
      responseCount: response.queryResult.responseMessages?.length || 0,
      page: page,
      queryText: queryText
    });
    
    return response;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Dialogflow:', error);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
app.post(URI, async (req, res) => {
  res.status(200).send('OK');
  
  try {
    console.log('üì® Webhook –ø–æ–ª—É—á–µ–Ω');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if (req.body.callback_query) {
      const callbackQuery = req.body.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      
      console.log('üîÑ Callback:', data);
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
      await axios.post(`${API_URL}/answerCallbackQuery`, {
        callback_query_id: callbackQuery.id
      });
      
      const userSession = userSessions.get(chatId);
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Ç–µ–ª—è–º
      if (data.startsWith('hotel_')) {
        const hotelIndex = parseInt(data.split('_')[1]);
        
        if (userSession && userSession.hotels && userSession.hotels[hotelIndex]) {
          const hotel = userSession.hotels[hotelIndex];
          const currentPage = userSession.currentPage || 1;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –æ—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
          userSession.currentHotelIndex = hotelIndex;
          userSessions.set(chatId, userSession);
          
          const hotelCard = createHotelCard(hotel, hotelIndex, userSession.hotels.length, currentPage);
          
          try {
            await axios.post(`${API_URL}/editMessageMedia`, {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              media: {
                type: 'photo',
                media: hotelCard.photo,
                caption: hotelCard.caption,
                parse_mode: 'Markdown'
              },
              reply_markup: hotelCard.reply_markup
            });
          } catch (editError) {
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await axios.post(`${API_URL}/sendPhoto`, {
              chat_id: chatId,
              ...hotelCard
            });
          }
        }
        return;
      }
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
      if (data.startsWith('page_')) {
        const newPage = parseInt(data.split('_')[1]);
        
        console.log(`üîÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${newPage}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await axios.post(`${API_URL}/sendChatAction`, {
          chat_id: chatId,
          action: 'typing'
        });
        
        try {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Dialogflow
          const lastSearchText = userSession?.lastSearchText || '–Ω–∞–π–¥–∏ –æ—Ç–µ–ª–∏';
          const response = await queryDialogflowForHotels(lastSearchText, chatId, newPage);
          
          if (response.queryResult.responseMessages) {
            const responseText = response.queryResult.responseMessages
              .map(msg => msg.text ? msg.text.text.join('') : '')
              .join('\n');
            
            console.log('üìù Response text for page:', responseText.substring(0, 200));
            
            const hotels = parseHotelsFromResponse(responseText);
            
            if (hotels.length > 0) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–æ–≤—ã–º–∏ –æ—Ç–µ–ª—è–º–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
              userSession.hotels = hotels;
              userSession.currentHotelIndex = 0;
              userSession.currentPage = newPage;
              userSessions.set(chatId, userSession);
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
              const hotelCard = createHotelCard(hotels[0], 0, hotels.length, newPage);
              
              try {
                await axios.post(`${API_URL}/editMessageMedia`, {
                  chat_id: chatId,
                  message_id: callbackQuery.message.message_id,
                  media: {
                    type: 'photo',
                    media: hotelCard.photo,
                    caption: hotelCard.caption,
                    parse_mode: 'Markdown'
                  },
                  reply_markup: hotelCard.reply_markup
                });
              } catch (editError) {
                await axios.post(`${API_URL}/sendPhoto`, {
                  chat_id: chatId,
                  ...hotelCard
                });
              }
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              await axios.post(`${API_URL}/sendMessage`, {
                chat_id: chatId,
                text: `‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${newPage} - –Ω–∞–π–¥–µ–Ω–æ ${hotels.length} –æ—Ç–µ–ª–µ–π`
              });
              
            } else {
              await axios.post(`${API_URL}/sendMessage`, {
                chat_id: chatId,
                text: `‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${newPage} –æ—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
              });
            }
          }
        } catch (pageError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageError);
          await axios.post(`${API_URL}/sendMessage`, {
            chat_id: chatId,
            text: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${newPage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
          });
        }
        return;
      }
      
      // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç–µ–ª–µ–π
      if (data === 'back_to_list') {
        const userSession = userSessions.get(chatId);
        
        if (userSession && userSession.hotels && userSession.hotels.length > 0) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –æ—Ç–µ–ª—é –≤ —Å–ø–∏—Å–∫–µ
          const currentIndex = userSession.currentHotelIndex || 0;
          const hotel = userSession.hotels[currentIndex];
          const currentPage = userSession.currentPage || 1;
          
          console.log(`üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç–µ–ª–µ–π: –æ—Ç–µ–ª—å ${currentIndex + 1}/${userSession.hotels.length}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}`);
          
          const hotelCard = createHotelCard(hotel, currentIndex, userSession.hotels.length, currentPage);
          
          try {
            await axios.post(`${API_URL}/sendPhoto`, {
              chat_id: chatId,
              ...hotelCard
            });
          } catch (photoError) {
            await axios.post(`${API_URL}/sendMessage`, {
              chat_id: chatId,
              text: `üè® ${hotelCard.caption}\n\nüì∑ –§–æ—Ç–æ: ${hotelCard.photo || '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`,
              parse_mode: hotelCard.parse_mode,
              reply_markup: hotelCard.reply_markup
            });
          }
          
          await axios.post(`${API_URL}/sendMessage`, {
            chat_id: chatId,
            text: `‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –æ—Ç–µ–ª–µ–π (—Å—Ç—Ä. ${currentPage})`
          });
          
        } else {
          await axios.post(`${API_URL}/sendMessage`, {
            chat_id: chatId,
            text: '‚ùå –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.',
            reply_markup: {
              inline_keyboard: [[
                { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'new_search' }
              ]]
            }
          });
        }
        return;
      }
      
      // –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
      if (data.startsWith('contact_')) {
        await axios.post(`${API_URL}/sendMessage`, {
          chat_id: chatId,
          text: `üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º*\n\nüë§ Telegram: @asialuxe_manager\n\n‚è∞ –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç`,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // –î–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è
      if (data.startsWith('detail_')) {
        const hotelId = data.split('_')[1];
        
        console.log(`üè® –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è ID: ${hotelId}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await axios.post(`${API_URL}/sendChatAction`, {
          chat_id: chatId,
          action: 'typing'
        });
        
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Dialogflow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è
          const response = await queryDialogflowForHotelDetails(`–ø–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–µ–ª–µ ${hotelId}`, chatId);
          
          if (response.queryResult.responseMessages) {
            const responseText = response.queryResult.responseMessages
              .map(msg => msg.text ? msg.text.text.join('') : '')
              .join('\n');
            
            console.log('üìù –î–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', responseText.substring(0, 200));
            
            // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è
            const hotelDetails = parseHotelDetails(responseText);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
            const formattedText = formatHotelDetailsForTelegram(hotelDetails, responseText);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            const userSession = userSessions.get(chatId);
            let replyMarkup = null;
            
            if (userSession && userSession.hotels && userSession.hotels.length > 0) {
              replyMarkup = {
                inline_keyboard: [
                  [
                    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ—Ç–µ–ª–µ–π', callback_data: `back_to_list` }
                  ],
                  [
                    { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `contact_${hotelId}` }
                  ]
                ]
              };
            } else {
              replyMarkup = {
                inline_keyboard: [
                  [
                    { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `contact_${hotelId}` }
                  ],
                  [
                    { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'new_search' }
                  ]
                ]
              };
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            if (hotelDetails.img) {
              try {
                await axios.post(`${API_URL}/sendPhoto`, {
                  chat_id: chatId,
                  photo: hotelDetails.img,
                  caption: formattedText,
                  parse_mode: 'Markdown',
                  reply_markup: replyMarkup
                });
              } catch (photoError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç');
                await axios.post(`${API_URL}/sendMessage`, {
                  chat_id: chatId,
                  text: formattedText + `\n\nüì∑ –§–æ—Ç–æ: ${hotelDetails.img}`,
                  parse_mode: 'Markdown',
                  reply_markup: replyMarkup
                });
              }
            } else {
              await axios.post(`${API_URL}/sendMessage`, {
                chat_id: chatId,
                text: formattedText,
                parse_mode: 'Markdown',
                reply_markup: replyMarkup
              });
            }
            
          } else {
            await axios.post(`${API_URL}/sendMessage`, {
              chat_id: chatId,
              text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ'
            });
          }
        } catch (detailError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è:', detailError);
          await axios.post(`${API_URL}/sendMessage`, {
            chat_id: chatId,
            text: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
          });
        }
        return;
      }
      
      // –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
      if (data === 'new_search') {
        userSessions.delete(chatId);
        await axios.post(`${API_URL}/sendMessage`, {
          chat_id: chatId,
          text: `üîç *–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ –ê–Ω—Ç–∞–ª–∏–∏*\n\n–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n\n–ü—Ä–∏–º–µ—Ä: "–æ—Ç–µ–ª—å —Å 25 –ø–æ 30 –¥–µ–∫–∞–±—Ä—è –¥–ª—è 2 –≤–∑—Ä–æ—Å–ª—ã—Ö"`,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      return;
    }
    
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   if (!req.body?.message?.text) {
     return;
   }
   
   const chatId = req.body.message.chat.id;
   const messageText = req.body.message.text;
   
   console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', messageText);
   
   // –ö–æ–º–∞–Ω–¥–∞ /start
   if (messageText === '/start') {
     await axios.post(`${API_URL}/sendMessage`, {
       chat_id: chatId,
       text: `üè® *–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ –ê–Ω—Ç–∞–ª–∏–∏*\n\nüëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å –≤ –ê–Ω—Ç–∞–ª–∏–∏\n\n‚ú® –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n‚Ä¢ "–Ω–∞–π–¥–∏ –æ—Ç–µ–ª—å –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"\n‚Ä¢ "–æ—Ç–µ–ª—å —Å 25 –¥–µ–∫–∞–±—Ä—è –ø–æ 1 —è–Ω–≤–∞—Ä—è"\n‚Ä¢ "–æ—Ç–µ–ª—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è 2 —á–µ–ª–æ–≤–µ–∫"\n‚Ä¢ "–ø–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2" - –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n‚Ä¢ "–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–µ–ª–µ 12345" - –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è`,
       parse_mode: 'Markdown'
     });
     return;
   }
   
   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è
   const hotelDetailMatch = messageText.match(/–ø–æ–¥—Ä–æ–±–Ω–µ–µ\s+–æ–±\s+–æ—Ç–µ–ª–µ\s+(\d+)|–¥–µ—Ç–∞–ª–∏\s+–æ—Ç–µ–ª—è\s+(\d+)|–æ—Ç–µ–ª—å\s+(\d+)\s+–ø–æ–¥—Ä–æ–±–Ω–µ–µ/i);
   if (hotelDetailMatch) {
     const hotelId = hotelDetailMatch[1] || hotelDetailMatch[2] || hotelDetailMatch[3];
     
     console.log(`üè® –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è ID: ${hotelId}`);
     
     await axios.post(`${API_URL}/sendChatAction`, {
       chat_id: chatId,
       action: 'typing'
     });
     
     try {
       const response = await queryDialogflowForHotelDetails(`–ø–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–µ–ª–µ ${hotelId}`, chatId);
       
       if (response.queryResult.responseMessages) {
         const responseText = response.queryResult.responseMessages
           .map(msg => msg.text ? msg.text.text.join('') : '')
           .join('\n');
         
         // –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è
         const hotelDetails = parseHotelDetails(responseText);
         
         // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
         const formattedText = formatHotelDetailsForTelegram(hotelDetails, responseText);
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
         const userSession = userSessions.get(chatId);
         let replyMarkup = null;
         
         if (userSession && userSession.hotels && userSession.hotels.length > 0) {
           replyMarkup = {
             inline_keyboard: [
               [
                 { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ—Ç–µ–ª–µ–π', callback_data: `back_to_list` }
               ],
               [
                 { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `contact_${hotelId}` }
               ]
             ]
           };
         } else {
           replyMarkup = {
             inline_keyboard: [
               [
                 { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: `contact_${hotelId}` }
               ],
               [
                 { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'new_search' }
               ]
             ]
           };
         }
         
         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–µ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
         if (hotelDetails.img) {
           try {
             await axios.post(`${API_URL}/sendPhoto`, {
               chat_id: chatId,
               photo: hotelDetails.img,
               caption: formattedText,
               parse_mode: 'Markdown',
               reply_markup: replyMarkup
             });
           } catch (photoError) {
             console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç');
             await axios.post(`${API_URL}/sendMessage`, {
               chat_id: chatId,
               text: formattedText + `\n\nüì∑ –§–æ—Ç–æ: ${hotelDetails.img}`,
               parse_mode: 'Markdown',
               reply_markup: replyMarkup
             });
           }
         } else {
           await axios.post(`${API_URL}/sendMessage`, {
             chat_id: chatId,
             text: formattedText,
             parse_mode: 'Markdown',
             reply_markup: replyMarkup
           });
         }
       } else {
         await axios.post(`${API_URL}/sendMessage`, {
           chat_id: chatId,
           text: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ'
         });
       }
     } catch (error) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç:', error);
       await axios.post(`${API_URL}/sendMessage`, {
         chat_id: chatId,
         text: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
       });
     }
     return;
   }
   
   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   const requestedPage = isPageCommand(messageText);
   const userSession = userSessions.get(chatId);
   
   if (requestedPage && userSession && userSession.lastSearchText) {
     console.log(`üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${requestedPage} —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç`);
     
     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
     await axios.post(`${API_URL}/sendChatAction`, {
       chat_id: chatId,
       action: 'typing'
     });
     
     try {
       const response = await queryDialogflowForHotels(userSession.lastSearchText, chatId, requestedPage);
       
       if (response.queryResult.responseMessages) {
         const responseText = response.queryResult.responseMessages
           .map(msg => msg.text ? msg.text.text.join('') : '')
           .join('\n');
         
         const hotels = parseHotelsFromResponse(responseText);
         
         if (hotels.length > 0) {
           // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
           userSession.hotels = hotels;
           userSession.currentHotelIndex = 0;
           userSession.currentPage = requestedPage;
           userSessions.set(chatId, userSession);
           
           // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å
           const hotelCard = createHotelCard(hotels[0], 0, hotels.length, requestedPage);
           
           try {
             await axios.post(`${API_URL}/sendPhoto`, {
               chat_id: chatId,
               ...hotelCard
             });
           } catch (photoError) {
             await axios.post(`${API_URL}/sendMessage`, {
               chat_id: chatId,
               text: `üè® ${hotelCard.caption}\n\nüì∑ –§–æ—Ç–æ: ${hotelCard.photo || '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`,
               parse_mode: hotelCard.parse_mode,
               reply_markup: hotelCard.reply_markup
             });
           }
           
           await axios.post(`${API_URL}/sendMessage`, {
             chat_id: chatId,
             text: `‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${requestedPage} - –Ω–∞–π–¥–µ–Ω–æ ${hotels.length} –æ—Ç–µ–ª–µ–π`
           });
           
         } else {
           await axios.post(`${API_URL}/sendMessage`, {
             chat_id: chatId,
             text: `‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${requestedPage} –æ—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
           });
         }
       }
     } catch (error) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç:', error);
       await axios.post(`${API_URL}/sendMessage`, {
         chat_id: chatId,
         text: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${requestedPage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
       });
     }
     return;
   }
   
   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
   await axios.post(`${API_URL}/sendChatAction`, {
     chat_id: chatId,
     action: 'typing'
   });
   
   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Dialogflow CX
   const response = await queryDialogflowForHotels(messageText, chatId, 1);
   
   // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
   if (response.queryResult.responseMessages) {
     const responseText = response.queryResult.responseMessages
       .map(msg => msg.text ? msg.text.text.join('') : '')
       .join('\n');
     
     console.log('üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Dialogflow:', responseText);
     
     // –ü–∞—Ä—Å–∏–º –æ—Ç–µ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
     const hotels = parseHotelsFromResponse(responseText);
     
     if (hotels.length > 0) {
       // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
       userSessions.set(chatId, {
         hotels: hotels,
         currentHotelIndex: 0,
         currentPage: 1,
         lastSearchText: messageText
       });
       
       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å
       try {
         const hotelCard = createHotelCard(hotels[0], 0, hotels.length, 1);
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ñ–æ—Ç–æ
         if (hotelCard.photo && hotelCard.photo.startsWith('http')) {
           await axios.post(`${API_URL}/sendPhoto`, {
             chat_id: chatId,
             ...hotelCard
           });
         } else {
           // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
           await axios.post(`${API_URL}/sendMessage`, {
             chat_id: chatId,
             text: hotelCard.caption,
             parse_mode: hotelCard.parse_mode,
             reply_markup: hotelCard.reply_markup
           });
         }
         
       } catch (photoError) {
         console.log('‚ö†Ô∏è Photo error, sending as text:', photoError.message);
         
         // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         const hotelCard = createHotelCard(hotels[0], 0, hotels.length, 1);
         await axios.post(`${API_URL}/sendMessage`, {
           chat_id: chatId,
           text: `üè® ${hotelCard.caption}\n\nüì∑ –§–æ—Ç–æ: ${hotelCard.photo || '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`,
           parse_mode: hotelCard.parse_mode,
           reply_markup: hotelCard.reply_markup
         });
       }
       
       // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       await axios.post(`${API_URL}/sendMessage`, {
         chat_id: chatId,
         text: `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hotels.length} –æ—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n\nüëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É X"`
       });
       
     } else {
       // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
       await axios.post(`${API_URL}/sendMessage`, {
         chat_id: chatId,
         text: responseText || '–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
       });
     }
   } else {
     await axios.post(`${API_URL}/sendMessage`, {
       chat_id: chatId,
       text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
     });
   }
   
 } catch (error) {
   console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
   
   const chatId = req.body?.message?.chat?.id || req.body?.callback_query?.message?.chat?.id;
   if (chatId) {
     try {
       await axios.post(`${API_URL}/sendMessage`, {
         chat_id: chatId,
         text: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @asialuxe_manager'
       });
     } catch (sendError) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
     }
   }
 }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async function setupWebhook() {
 try {
   const response = await axios.post(`${API_URL}/setWebhook`, {
     url: WEBHOOK,
     allowed_updates: ['message', 'callback_query']
   });
   console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', response.data);
 } catch (error) {
   console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
 }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
 console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
 console.log(`üîó Webhook URL: ${WEBHOOK}`);
 setupWebhook();
});

module.exports = app;