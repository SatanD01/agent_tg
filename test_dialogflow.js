require('dotenv').config();
const {SessionsClient} = require('@google-cloud/dialogflow-cx');

const PROJECT_ID = process.env.PROJECT_ID;
const LOCATION_ID = process.env.LOCATION_ID;
const AGENT_ID = process.env.AGENT_ID;
const LANGUAGE_CODE = process.env.LANGUAGE_CODE;

const client = new SessionsClient({
  apiEndpoint: LOCATION_ID + '-dialogflow.googleapis.com'
});

async function testDialogflow() {
  try {
    const sessionId = 'test-session-123';
    const sessionPath = client.projectLocationAgentSessionPath(
      PROJECT_ID, LOCATION_ID, AGENT_ID, sessionId
    );
    
    const testPhrases = [
      '–Ω–∞–π–¥–∏ –æ—Ç–µ–ª–∏',
      '–æ—Ç–µ–ª—å –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é',
      '–ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ –ê–Ω—Ç–∞–ª–∏–∏',
      '–Ω–∞–π–¥–∏ –º–Ω–µ –æ—Ç–µ–ª—å –≤ –ê–Ω—Ç–∞–ª–∏–∏ –Ω–∞ 2–≤–∑—Ä–æ—Å–ª—ã—Ö',
      '–æ—Ç–µ–ª—å —Å 25 –ø–æ 30 –¥–µ–∫–∞–±—Ä—è',
      '–ø—Ä–∏–≤–µ—Ç'
    ];
    
    for (const text of testPhrases) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${text}"`);
      console.log('='.repeat(50));
      
      const request = {
        session: sessionPath,
        queryInput: {
          text: { text: text },
          languageCode: LANGUAGE_CODE
        }
      };
      
      const [response] = await client.detectIntent(request);
      
      console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç:');
      console.log(`   Intent: ${response.queryResult.intent?.displayName || '–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù'}`);
      console.log(`   Confidence: ${response.queryResult.intentDetectionConfidence || 0}`);
      console.log(`   Parameters:`, response.queryResult.parameters);
      
      if (response.queryResult.responseMessages && response.queryResult.responseMessages.length > 0) {
        const responseText = response.queryResult.responseMessages
          .map(msg => msg.text ? msg.text.text.join('') : '')
          .join('\n');
        
        console.log(`   Response: ${responseText.substring(0, 200)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–µ–ª—è—Ö
        const hasHotelData = responseText.includes('HOTEL_PHOTO') || 
                           responseText.includes('HOTEL_INFO') ||
                           responseText.includes('–æ—Ç–µ–ª');
        console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–µ–ª—è—Ö: ${hasHotelData ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DIALOGFLOW CX');
console.log('Project:', PROJECT_ID);
console.log('Agent:', AGENT_ID);
testDialogflow();
